{"version":3,"sources":["../src/percentage_ctrl.js"],"names":["SingleStatCtrl","moment","_","$","kbn","TimeSeries","PercentagePluginCtrl","$scope","$injector","$rootScope","panelDefaults","links","datasource","maxDataPoints","interval","targets","cacheTimeout","dayInterval","hourInterval","minuteInterval","defaults","panel","scope","unitFormats","getUnitFormats","subItem","format","value","render","Promise","resolve","reject","length","$q","when","scopedVars","Object","assign","text","intervalMs","metricsQuery","panelId","id","range","rangeRaw","renderer","resolution","query","result","setTimeQueryEnd","loading","data","error","Error","message","datapoints","subscribe","handleDataStream","dashboard","snapshot","snapshotData","console","log","percentage","splice","events","emit","templateUrl"],"mappings":"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","file":"percentage_ctrl.js","sourcesContent":["import {SingleStatCtrl} from 'app/plugins/panel/singlestat/module';\n\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport 'jquery.flot';\nimport 'jquery.flot.gauge';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\n\nexport class PercentagePluginCtrl extends SingleStatCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      links: [],\n      datasource: null,\n      maxDataPoints: 100,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      dayInterval: 'NOW',\n      hourInterval: 'NOW',\n      minuteInterval: 'NOW',\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    this.scope = $scope;\n\n  }\n\n  onInitEditMode() {\n    super.onInitEditMode();\n    //this.addEditorTab('Delta Config', 'public/plugins/grafana-delta-panel/delta_config.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    super.setUnitFormat();\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  issueQueries(datasource) {\n    return new Promise((resolve, reject) => {\n      this.datasource = datasource;\n\n      if (!this.panel.targets || this.panel.targets.length === 0) {\n        return this.$q.when([]);\n      }\n\n      // make shallow copy of scoped vars,\n      // and add built in variables interval and interval_ms\n      var scopedVars = Object.assign({}, this.panel.scopedVars, {\n        \"__interval\":     {text: this.interval,   value: this.interval},\n        \"__interval_ms\":  {text: this.intervalMs, value: this.intervalMs},\n      });\n\n      var metricsQuery = {\n        panelId: this.panel.id,\n        range: this.range,\n        rangeRaw: this.rangeRaw,\n        interval: this.interval,\n        intervalMs: this.intervalMs,\n        targets: this.panel.targets,\n        format: this.panel.renderer === 'png' ? 'png' : 'json',\n        maxDataPoints: this.resolution,\n        scopedVars: scopedVars,\n        cacheTimeout: this.panel.cacheTimeout\n      };\n      return resolve(datasource.query(metricsQuery));\n    });\n  }\n\n  handleQueryResult(result) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    if (result.data.length != 2) {\n      let error = new Error();\n      error.message = 'Not enougth series error';\n      error.data = 'Metric query returns ' + result.data.length + ' series.\\nPercentage stat panel expects two series.';\n      throw error;\n    }\n    if (result.data[0].datapoints.length != 1 || result.data[1].datapoints.length != 1) {\n      let error = new Error();\n      error.message = 'Some values are not aggregated. Single result from each query is needed';\n      error.data = error.message;\n      throw error;\n    }\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = {data: []};\n    }\n\n    let percentage = (result.data[0].datapoints[0][0] / result.data[1].datapoints[0][0]) * 100\n\n    result.data.splice(1, 1);\n\n    result.data[0].datapoints[0][0] = percentage;\n\n    return this.events.emit('data-received', result.data);\n  }\n}\n\nPercentagePluginCtrl.templateUrl = 'module.html';\n"]}